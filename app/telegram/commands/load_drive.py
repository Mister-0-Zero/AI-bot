# app/telegram/handlers/drive.py
import multiprocessing

from telegram import Update
from telegram.ext import ContextTypes

from app.core.logging_config import get_logger
from app.core.vector_store import store_documents_async
from app.services.google_drive import read_files_from_drive

logger = get_logger(__name__)


def _fetch_token_process(telegram_id: int, conn):
    from app.services.token_refresh_sync import get_valid_access_token_sync

    try:
        conn.send(get_valid_access_token_sync(telegram_id))
    except Exception as e:
        conn.send(e)
    finally:
        conn.close()


async def cmd_load_drive(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    /load_drive <all | file1.pdf, file2.docx | Folder1/, Folder2/>
    ‚Ä¢ –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ù–ï–¢ ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ —Å—á–∏—Ç—ã–≤–∞–µ–º, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    ‚Ä¢ all                ‚Üí —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
    ‚Ä¢ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤       ‚Üí —Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
    ‚Ä¢ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫ (slash)‚Üí —Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —ç—Ç–∏—Ö –ø–∞–ø–æ–∫
    ‚Ä¢ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å (—Ñ–∞–π–ª—ã + –ø–∞–ø–∫–∏)
    """
    telegram_id = update.effective_user.id
    logger.info("üöÄ /load_drive –∑–∞–ø—É—â–µ–Ω, telegram_id=%s", telegram_id)

    # 1Ô∏è‚É£‚Ää –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    raw_parts = (update.message.text or "").split(maxsplit=1)
    if len(raw_parts) == 1:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "  /load_drive all ‚Äî —Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã\n"
            "  /load_drive file1.pdf, file2.docx ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã\n"
            "  /load_drive –ü–∞–ø–∫–∞1/, –ü–∞–ø–∫–∞2/ ‚Äî –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–æ–∫\n"
            "–ú–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å: –ü–∞–ø–∫–∞/, –æ—Ç—á–µ—Ç.docx"
        )
        return

    arg_str = raw_parts[1].strip()
    if arg_str.lower() == "all":
        file_names = folder_names = None
    else:
        items = [i.strip() for i in arg_str.split(",") if i.strip()]
        file_names = [i for i in items if not i.endswith("/")]
        folder_names = [i.rstrip("/") for i in items if i.endswith("/")]
        if not file_names and not folder_names:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ —Ñ–∞–π–ª–æ–≤, –Ω–∏ –ø–∞–ø–æ–∫."
            )
            return

    # 2Ô∏è‚É£‚Ää –ü–æ–ª—É—á–∞–µ–º access_token (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
    parent_conn, child_conn = multiprocessing.Pipe()
    proc = multiprocessing.Process(
        target=_fetch_token_process, args=(telegram_id, child_conn)
    )
    proc.start()
    result = parent_conn.recv()
    proc.join()

    if isinstance(result, Exception):
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: %s", result)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Google. –ò—Å–ø–æ–ª—å–∑—É–π /connect_google"
        )
        return

    access_token: str = result
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, telegram_id=%s", telegram_id)

    async def progress(text: str):
        logger.info(text)
        await update.message.reply_text(text)

    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤‚Ä¶")

    # 3Ô∏è‚É£‚Ää –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
    try:
        files = await read_files_from_drive(
            access_token=access_token,
            user_id=telegram_id,
            on_progress=progress,
            file_names=file_names,
            folder_names=folder_names,
        )
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %s", e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤.")
        return

    if not files:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    await update.message.reply_text(f"üìö –°—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    await update.message.reply_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π‚Ä¶")

    # 4Ô∏è‚É£‚Ää –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    try:
        await store_documents_async(files)
        await update.message.reply_text("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: %s", e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
