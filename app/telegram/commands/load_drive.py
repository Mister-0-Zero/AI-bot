import multiprocessing

from telegram import Update
from telegram.ext import ContextTypes

from app.core.logging_config import get_logger
from app.core.vector_store import store_documents_async
from app.services.google_drive import read_files_from_drive

logger = get_logger(__name__)


def _fetch_token_process(telegram_id: int, conn):
    from app.services.token_refresh_sync import get_valid_access_token_sync

    try:
        token = get_valid_access_token_sync(telegram_id)
        conn.send(token)
    except Exception as e:
        conn.send(e)
    finally:
        conn.close()


async def cmd_load_drive(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    logger.info("üöÄ /load_drive –∑–∞–ø—É—â–µ–Ω, telegram_id=%s", telegram_id)

    # 1Ô∏è‚É£‚Ää –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: all | —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω
    raw_parts = (update.message.text or "").split(maxsplit=1)
    argument = raw_parts[1].strip() if len(raw_parts) > 1 else "all"
    selected_names = (
        None
        if argument.lower() == "all"
        else [n.strip() for n in argument.split(",") if n.strip()]
    )

    # 2Ô∏è‚É£‚Ää –ü–æ–ª—É—á–∞–µ–º access_token –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    parent_conn, child_conn = multiprocessing.Pipe()
    proc = multiprocessing.Process(
        target=_fetch_token_process, args=(telegram_id, child_conn)
    )
    proc.start()
    result = parent_conn.recv()
    proc.join()

    if isinstance(result, Exception):
        logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: %s", result)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Google. –ò—Å–ø–æ–ª—å–∑—É–π /connect_google"
        )
        return

    access_token: str = result
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, telegram_id=%s", telegram_id)

    async def progress(text: str):
        logger.info(text)
        await update.message.reply_text(text)

    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤‚Ä¶")

    # 3Ô∏è‚É£‚Ää –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã (all –∏–ª–∏ –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ)
    try:
        files = await read_files_from_drive(
            access_token=access_token,
            user_id=telegram_id,
            on_progress=progress,
            selected_names=selected_names,
        )
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %s", e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤.")
        return

    if not files:
        await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    await update.message.reply_text(f"üìö –°—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    await update.message.reply_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π‚Ä¶")

    # 4Ô∏è‚É£‚Ää –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    try:
        await store_documents_async(files)
        await update.message.reply_text("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: %s", e)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
