from telegram import Update
from telegram.ext import ContextTypes

from app.core.vector_store import load_vector_db


async def cmd_list_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db = load_vector_db()
    if db is None:
        await update.message.reply_text("‚ùå –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    try:
        results = db._collection.get(include=["metadatas"], where={"user_id": user_id})
        metadatas = results.get("metadatas", [])

        file_names = sorted(
            {meta.get("file_name") or meta["file_id"] for meta in metadatas}
        )

        if not file_names:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ —Ñ–∞–π–ª—ã.")
        else:
            text = "üìÇ –í–∞—à–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n\n" + "\n".join(
                f"‚Ä¢ {name}" for name in file_names
            )
            await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.")
        raise e
