from __future__ import annotations

import logging
from typing import Awaitable, Callable, List

import filetype
import httpx

from app.services.reader.csv_reader import CsvReader
from app.services.reader.docx_reader import DocxReader
from app.services.reader.excel_reader import ExcelReader
from app.services.reader.pdf_reader import PdfReader
from app.services.reader.txt_reader import TxtReader

logger = logging.getLogger(__name__)

TEXT_MIME_TYPES = {
    "text/plain": "txt",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
    "application/pdf": "pdf",
    "text/csv": "csv",
    "application/vnd.ms-excel": "csv",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
}

MAX_FILES_PER_RUN = 10
MAX_FILE_SIZE = 100 * 1024  # 100 –ö–ë


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ public API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def read_files_from_drive(
    access_token: str,
    user_id: int,
    on_progress: Callable[[str], Awaitable[None]],
    selected_names: List[str] | None = None,
) -> List[tuple[str, str, str, int]]:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ Google Drive.

    * selected_names is None  ‚Üí —á–∏—Ç–∞–µ–º –ª—é–±—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (–¥–æ 10 —à—Ç.).
    * selected_names = [...]  ‚Üí —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                                (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏, —Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (file_id, file_name, text, user_id) —Ç–æ–ª—å–∫–æ
    –¥–ª—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    tok_short = access_token[:10] + "‚Ä¶" if len(access_token) > 10 else access_token
    logger.info("üöÄ read_files_from_drive started, token=%s", tok_short)
    await on_progress("üîÑ –ò—â—É —Ñ–∞–π–ª—ã –≤ Google –î–∏—Å–∫–µ‚Ä¶")

    # 1Ô∏è‚É£  –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    headers = {"Authorization": f"Bearer {access_token}"}
    async with httpx.AsyncClient() as client:
        resp = await client.get(
            "https://www.googleapis.com/drive/v3/files",
            headers=headers,
            params={
                "pageSize": 1000,
                "fields": "files(id,name,mimeType)",
                "q": "trashed = false",
            },
        )
        resp.raise_for_status()
        files = resp.json().get("files", [])

    logger.info("üóÇ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤ –≤ Drive", len(files))

    # 2Ô∏è‚É£  –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if selected_names is not None:
        name_set = {n.lower() for n in selected_names}
        files = [f for f in files if f["name"].lower() in name_set]
        logger.info("üîé –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏–º–µ–Ω–∏: %d —Ñ–∞–π–ª–æ–≤", len(files))

    if not files:
        return []  # —Å–∏–≥–Ω–∞–ª –≤—ã–∑—ã–≤–∞—é—â–µ–º—É, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    # 3Ô∏è‚É£  –§–∏–ª—å—Ç—Ä –ø–æ MIME –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    candidates = [f for f in files if f["mimeType"] in TEXT_MIME_TYPES][
        :MAX_FILES_PER_RUN
    ]
    logger.info("üìÑ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ MIME: %d", len(candidates))

    result: List[tuple[str, str, str, int]] = []

    # 4Ô∏è‚É£  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for meta in candidates:
        file_id, file_name, mime_type = meta["id"], meta["name"], meta["mimeType"]

        await on_progress(f"üîç –ß–∏—Ç–∞—é: {file_name}")
        logger.debug(
            "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é %s (id=%s, mime=%s)", file_name, file_id, mime_type
        )

        text = await _download_and_extract_text(
            file_id=file_id,
            file_name=file_name,
            mime_type=mime_type,
            headers=headers,
        )

        if text:
            result.append((file_id, file_name, text, user_id))
            await on_progress(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {file_name}")
        else:
            await on_progress(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {file_name}")

        if len(result) >= MAX_FILES_PER_RUN:
            break  # –ª–∏–º–∏—Ç –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫

    await on_progress(f"üì• –£—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result)}")
    logger.info("üèÅ read_files_from_drive finished. total=%d", len(result))
    return result


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _download_and_extract_text(
    file_id: str,
    file_name: str,
    mime_type: str,
    headers: dict,
) -> str | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç. –í–µ—Ä–Ω—ë—Ç None, –µ—Å–ª–∏ >100 –ö–ë –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."""
    export_url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media"

    async with httpx.AsyncClient() as client:
        # –ü–æ–ø—ã—Ç–∫–∞ HEAD –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        try:
            head = await client.head(export_url, headers=headers, follow_redirects=True)
            if (cl := head.headers.get("Content-Length")) and int(cl) > MAX_FILE_SIZE:
                logger.info("‚è≠ %s > 100 –ö–ë (–ø–æ Content-Length)", file_name)
                return None
        except Exception:
            pass  # HEAD –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

        # GET —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        try:
            resp = await client.get(export_url, headers=headers, follow_redirects=True)
            resp.raise_for_status()
            content = resp.content
        except Exception as e:
            logger.warning("‚ùå –ù–µ —Å–∫–∞—á–∞–Ω %s: %s", file_name, e)
            return None

    if len(content) > MAX_FILE_SIZE:
        logger.info("‚è≠ %s > 100 –ö–ë (—Ñ–∞–∫—Ç)", file_name)
        return None

    # –£—Ç–æ—á–Ω—è–µ–º MIME –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É, –µ—Å–ª–∏ Drive –ø—Ä–∏—Å–ª–∞–ª –Ω–µ—Ç–æ—á–Ω—ã–π
    if mime_type not in TEXT_MIME_TYPES:
        if kind := filetype.guess(content):
            mime_type = kind.mime

    reader = _select_reader(mime_type)
    if not reader:
        logger.debug("‚è≠ %s ‚Äî –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME %s", file_name, mime_type)
        return None

    try:
        return await reader.read(content)
    except Exception as e:
        logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %s", file_name, e)
        return None


def _select_reader(mime_type: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∏–¥–µ—Ä –∏–ª–∏ None."""
    return {
        "text/plain": TxtReader(),
        "application/pdf": PdfReader(),
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document": DocxReader(),
        "text/csv": CsvReader(),
        "application/vnd.ms-excel": CsvReader(),
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ExcelReader(),
    }.get(mime_type)
