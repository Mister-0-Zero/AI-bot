import logging
from typing import Awaitable, Callable, Union

import filetype
import httpx

from app.services.reader.csv_reader import CsvReader
from app.services.reader.docx_reader import DocxReader
from app.services.reader.excel_reader import ExcelReader
from app.services.reader.pdf_reader import PdfReader
from app.services.reader.txt_reader import TxtReader

logger = logging.getLogger(__name__)

TEXT_MIME_TYPES = {
    "text/plain": "txt",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
    "application/pdf": "pdf",
    "text/csv": "csv",  # ‚Üê CSV
    "application/vnd.ms-excel": "csv",  # .csv –≤ Drive
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",  # .xlsx
}


MAX_FILE_SIZE = 10 * 1024


async def read_files_from_drive(
    access_token: str, user_id: int, on_progress: Callable[[str], Awaitable[None]]
) -> list[tuple[str, str, int]]:
    logger.info("üöÄ –°—Ç–∞—Ä—Ç read_files_from_drive, access_token=%s...", access_token[:10])
    headers = {"Authorization": f"Bearer {access_token}"}

    async with httpx.AsyncClient() as client:
        resp = await client.get(
            "https://www.googleapis.com/drive/v3/files",
            headers=headers,
            params={
                "pageSize": 100,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ
                "fields": "files(id, name, mimeType)",
                "q": "trashed = false",
            },
        )
        resp.raise_for_status()
        files = resp.json().get("files", [])

    logger.info("üóÇ –ü–æ–ª—É—á–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤ –∏–∑ Drive", len(files))
    result: list[tuple[str, str, int]] = []

    for file in files:
        if len(result) >= 5:
            break  # –°—á–∏—Ç–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤

        file_name = file["name"]
        mime_type = file["mimeType"]
        file_id = file["id"]

        if mime_type not in TEXT_MIME_TYPES:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

        logger.info("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é %s (id=%s, mime=%s)", file_name, file_id, mime_type)
        text = await download_and_extract_text(file_id, mime_type, headers, file_name)

        if text:
            logger.info("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª %s", file_name)
            await on_progress(f"‚úÖ –°—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {file_name}")
            result.append((file_name, text, user_id))
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å %s", file_name)
            await on_progress(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_name}, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ txt, pdf, docx"
            )

    if not result:
        await on_progress("‚ÑπÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Google –î–∏—Å–∫–µ.")
    else:
        await on_progress(f"üì• –£—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result)}")

    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–∏–ª read_files_from_drive, –≤—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: %d", len(result))
    return result


async def download_and_extract_text(
    file_id: str, mime_type: str, headers: dict, file_name: str
) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª (‚â§10 –ö–ë), –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –ü—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º mime_type –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—á–µ—Ä–µ–∑ filetype).
    """
    export_url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media"

    try:
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            head_resp = await client.head(export_url, headers=headers)
            head_resp.raise_for_status()
            size_str = head_resp.headers.get("Content-Length")
            if size_str and int(size_str) > MAX_FILE_SIZE:
                logger.warning("–§–∞–π–ª %s –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ö–ë (%s –±–∞–π—Ç)", file_id, size_str)
                return None

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            resp = await client.get(export_url, headers=headers)
            resp.raise_for_status()
            content_bytes = resp.content

    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ %s: %s", file_id, e)
        return None

    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME
    if mime_type not in TEXT_MIME_TYPES:
        kind = filetype.guess(content_bytes)
        if kind:
            guessed_mime = kind.mime
            logger.info(
                "üîé MIME –æ—Ç Drive: %s ‚Üí –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ %s", mime_type, guessed_mime
            )
            mime_type = guessed_mime
        else:
            logger.info(
                "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ñ–∞–π–ª–∞ %s –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É", file_name
            )

    # –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∏–¥–µ—Ä–∞
    ReaderType = Union[TxtReader, PdfReader, DocxReader, CsvReader, ExcelReader]
    reader: ReaderType | None = None

    if mime_type == "text/plain":
        reader = TxtReader()
    elif mime_type == "application/pdf":
        reader = PdfReader()
    elif (
        mime_type
        == "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    ):
        reader = DocxReader()
    elif mime_type in {"text/csv", "application/vnd.ms-excel"}:
        reader = CsvReader()
    elif (
        mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    ):
        reader = ExcelReader()

    if not reader:
        logger.info("‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é %s ‚Äî –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME (%s)", file_name, mime_type)
        return None

    try:
        return await reader.read(content_bytes)
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s (%s): %s", file_name, mime_type, e)
        return None
