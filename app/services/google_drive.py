import logging
from typing import Awaitable, Callable

import filetype
import httpx

from app.services.reader.csv_reader import CsvReader
from app.services.reader.docx_reader import DocxReader
from app.services.reader.excel_reader import ExcelReader
from app.services.reader.pdf_reader import PdfReader
from app.services.reader.txt_reader import TxtReader

logger = logging.getLogger(__name__)

TEXT_MIME_TYPES = {
    "text/plain": "txt",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
    "application/pdf": "pdf",
    "text/csv": "csv",  # ‚Üê CSV
    "application/vnd.ms-excel": "csv",  # .csv –≤ Drive
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",  # .xlsx
}


MAX_FILES_PER_RUN = 10


async def read_files_from_drive(
    access_token: str,
    user_id: int,
    on_progress: Callable[[str], Awaitable[None]],
) -> list[tuple[str, str, str, int]]:
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ 10 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (file_id, text, user_id) —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö.
    """
    logger.info("üöÄ read_files_from_drive started, token=%s...", access_token[:10])
    await on_progress("üîÑ –ò—â—É —Ñ–∞–π–ª—ã –≤ Google –î–∏—Å–∫–µ‚Ä¶")

    # --- 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    headers = {"Authorization": f"Bearer {access_token}"}
    async with httpx.AsyncClient() as client:
        resp = await client.get(
            "https://www.googleapis.com/drive/v3/files",
            headers=headers,
            params={
                "pageSize": 100,
                "fields": "files(id,name,mimeType)",
                "q": "trashed = false",
            },
        )
        resp.raise_for_status()
        files = resp.json().get("files", [])

    logger.info("üóÇ –ù–∞–π–¥–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤ –≤ Drive", len(files))

    # --- 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MIME
    candidates = [f for f in files if f["mimeType"] in TEXT_MIME_TYPES][
        :MAX_FILES_PER_RUN
    ]
    logger.info("üìÑ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤: %d", len(candidates))

    result: list[tuple[str, str, str, int]] = []

    # --- 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for meta in candidates:
        file_id = meta["id"]
        file_name = meta["name"]
        mime_type = meta["mimeType"]

        await on_progress(f"üîç –ß–∏—Ç–∞—é: {file_name}")
        logger.info("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é %s (id=%s, mime=%s)", file_name, file_id, mime_type)

        text = await download_and_extract_text(file_id, mime_type, headers, file_name)

        if text:
            result.append((file_id, file_name, text, user_id))
            await on_progress(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {file_name}")
        else:
            await on_progress(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {file_name}")

        if len(result) >= MAX_FILES_PER_RUN:
            break  # –ª–∏–º–∏—Ç –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫

    # --- 4. –ò—Ç–æ–≥
    await on_progress(f"üì• –£—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result)}")
    logger.info("üèÅ read_files_from_drive finished. total=%d", len(result))
    return result


MAX_FILE_SIZE = 100 * 1024


async def download_and_extract_text(
    file_id: str,
    mime_type: str,
    headers: dict,
    file_name: str,
) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª, –¥–≤–∞–∂–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—è –ª–∏–º–∏—Ç 10 –ö–ë, –∞ –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
    """
    export_url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media"

    async with httpx.AsyncClient() as client:
        # ‚îÄ‚îÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π HEAD-–∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø—Ä–æ–±—É–µ–º)
        try:
            head = await client.head(export_url, headers=headers, follow_redirects=True)
            size_hdr = head.headers.get("Content-Length")
            if size_hdr and int(size_hdr) > MAX_FILE_SIZE:
                logger.warning(
                    "‚è≠ %s > 100 –ö–ë (–ø–æ Content-Length: %s –±–∞–π—Ç)", file_name, size_hdr
                )
                return None
        except Exception as e:
            logger.debug("HEAD %s –Ω–µ —É–¥–∞–ª—Å—è: %s (–ø—Ä–æ–¥–æ–ª–∂–∞—é)", file_name, e)

        # ‚îÄ‚îÄ –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            resp = await client.get(export_url, headers=headers, follow_redirects=True)
            resp.raise_for_status()
            content_bytes = resp.content
        except Exception as e:
            logger.warning("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ %s: %s", file_name, e)
            return None

    # ‚îÄ‚îÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    if len(content_bytes) > MAX_FILE_SIZE:
        logger.warning(
            "‚è≠ %s > 100 –ö–ë (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏: %d –±–∞–π—Ç)", file_name, len(content_bytes)
        )
        return None

    # ‚îÄ‚îÄ –£—Ç–æ—á–Ω—è–µ–º MIME –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if mime_type not in TEXT_MIME_TYPES:
        kind = filetype.guess(content_bytes)
        if kind:
            mime_type = kind.mime

    # ‚îÄ‚îÄ –í—ã–±–∏—Ä–∞–µ–º —Ä–∏–¥–µ—Ä
    reader: TxtReader | PdfReader | DocxReader | CsvReader | ExcelReader | None = None
    if mime_type == "text/plain":
        reader = TxtReader()
    elif mime_type == "application/pdf":
        reader = PdfReader()
    elif (
        mime_type
        == "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    ):
        reader = DocxReader()
    elif mime_type in {"text/csv", "application/vnd.ms-excel"}:
        reader = CsvReader()
    elif (
        mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    ):
        reader = ExcelReader()
    else:
        logger.info("‚è≠ %s ‚Äî –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME (%s)", file_name, mime_type)
        return None

    # ‚îÄ‚îÄ –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
    try:
        return await reader.read(content_bytes)
    except Exception as e:
        logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %s", file_name, e)
        return None
