import httpx
import logging
from .reader.txt_reader import TxtReader
from .reader.pdf_reader import PdfReader
from .reader.docxz_reader import DocxReader
import filetype

logger = logging.getLogger(__name__)

TEXT_MIME_TYPES = {
    "text/plain": "txt",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
    "application/pdf": "pdf",
}

async def read_files_from_drive(access_token: str, on_progress: callable) -> list[str]:
    logger.info("üöÄ –°—Ç–∞—Ä—Ç read_files_from_drive, access_token=%s...", access_token[:10])
    headers = {"Authorization": f"Bearer {access_token}"}

    async with httpx.AsyncClient() as client:
        resp = await client.get(
            "https://www.googleapis.com/drive/v3/files",
            headers=headers,
            params={"pageSize": 10, "fields": "files(id, name, mimeType)"},
        )
        resp.raise_for_status()
        files = resp.json().get("files", [])
    logger.info("üóÇ –ü–æ–ª—É—á–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤ –∏–∑ Drive", len(files))

    result: list[str] = []

    for file in files:
        file_name = file["name"]
        mime_type = file["mimeType"]
        file_id = file["id"]
        logger.info("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é %s (id=%s, mime=%s)", file_name, file_id, mime_type)

        text = await download_and_extract_text(file_id, mime_type, headers, file_name)
        if text:
            logger.info("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª %s", file_name)
            await on_progress(f"‚úÖ –°—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {file_name}")
            result.append(f"üìÑ {file_name}:\n{text}...")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å %s", file_name)
            await on_progress(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_name}")

    if not files:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è")
        await on_progress("‚ÑπÔ∏è –í Google –î–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤.")

    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–∏–ª read_files_from_drive, –≤—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: %d", len(result))
    return result


async def download_and_extract_text(
    file_id: str, mime_type: str, headers: dict, file_name: str
) -> str | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª (‚â§10 –ú–ë), –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º mime_type –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (library: filetype).
    """
    export_url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media"

    try:
        async with httpx.AsyncClient() as client:
            # 1. HEAD ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            head_resp = await client.head(export_url, headers=headers)
            head_resp.raise_for_status()
            size_str = head_resp.headers.get("Content-Length")
            if size_str and int(size_str) > MAX_FILE_SIZE:
                logger.warning("–§–∞–π–ª %s –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë (%s –±–∞–π—Ç)", file_id, size_str)
                return None

            # 2. GET ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            resp = await client.get(export_url, headers=headers)
            resp.raise_for_status()
            content_bytes = resp.content

    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ %s: %s", file_id, e)
        return None

    # ---------- –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É ----------
    if mime_type not in TEXT_MIME_TYPES:
        kind = filetype.guess(content_bytes)
        if kind:
            guessed_mime = kind.mime
            logger.info("üîé MIME –æ—Ç Drive: %s ‚Üí –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ %s", mime_type, guessed_mime)
            mime_type = guessed_mime
        else:
            logger.info("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ñ–∞–π–ª–∞ %s –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É", file_name)

    # ---------- –≤—ã–±–∏—Ä–∞–µ–º —Ä–∏–¥–µ—Ä ----------
    reader = None
    if mime_type == "text/plain":
        reader = TxtReader()
    elif mime_type == "application/pdf":
        reader = PdfReader()
    elif mime_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        reader = DocxReader()

    if not reader:
        logger.info("‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é %s ‚Äî –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME (%s)", file_name, mime_type)
        return None

    # ---------- —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ----------
    try:
        return await reader.read(content_bytes)
    except Exception as e:
        logger.warning("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s (%s): %s", file_name, mime_type, e)
        return None