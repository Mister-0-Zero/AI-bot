"""
app/services/google_drive.py

–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive c –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
  ‚Ä¢ all            ‚Äì –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã (–¥–æ MAX_FILES_PER_RUN)
  ‚Ä¢ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤  ‚Äì —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ name
  ‚Ä¢ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫   ‚Äì –≤—Å–µ —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ —ç—Ç–∏—Ö –ø–∞–ø–æ–∫
  ‚Ä¢ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—Ñ–∞–π–ª—ã + –ø–∞–ø–∫–∏)

–§–æ—Ä–º–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞:
    (file_id, file_name, extracted_text, user_id)
"""

from __future__ import annotations

import logging
from typing import Awaitable, Callable, List, Sequence

import filetype
import httpx

from app.services.reader.csv_reader import CsvReader
from app.services.reader.docx_reader import DocxReader
from app.services.reader.excel_reader import ExcelReader
from app.services.reader.pdf_reader import PdfReader
from app.services.reader.txt_reader import TxtReader

logger = logging.getLogger(__name__)

TEXT_MIME_TYPES = {
    "text/plain": "txt",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
    "application/pdf": "pdf",
    "text/csv": "csv",
    "application/vnd.ms-excel": "csv",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
}

FOLDER_MIME = "application/vnd.google-apps.folder"

MAX_FILES_PER_RUN = 10
MAX_FILE_SIZE = 100 * 1024  # 100 –ö–ë


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ public API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def read_files_from_drive(
    access_token: str,
    user_id: int,
    on_progress: Callable[[str], Awaitable[None]],
    *,
    file_names: Sequence[str] | None = None,
    folder_names: Sequence[str] | None = None,
) -> List[tuple[str, str, str, int]]:
    """
    –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ Google Drive.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ---------
    access_token : str
        OAuth-—Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_id : int
        Telegram ID ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
    on_progress : coroutine(str) -> None
        Callback –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    file_names : list[str] | None
        –¢–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –ø—É—Ç–∏). –ï—Å–ª–∏ None, —Ä–µ–∂–∏–º ¬´—á–∏—Ç–∞—Ç—å –≤—Å—ë¬ª.
    folder_names : list[str] | None
        –¢–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã, —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —ç—Ç–∏—Ö –ø–∞–ø–æ–∫.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    ----------
    list[tuple[file_id, file_name, text, user_id]]
    """
    tok_short = access_token[:10] + "‚Ä¶" if len(access_token) > 10 else access_token
    logger.info("üöÄ read_files_from_drive started, token=%s", tok_short)

    # ¬´all¬ª ‚Äì —ç—Ç–æ –∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ file_names –∏ folder_names
    read_all_mode = file_names is None and folder_names is None
    if read_all_mode:
        await on_progress("üîÑ –ò—â—É –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã –≤ Google –î–∏—Å–∫–µ‚Ä¶")
    else:
        await on_progress("üîÑ –ò—â—É —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –≤ Google –î–∏—Å–∫–µ‚Ä¶")

    headers = {"Authorization": f"Bearer {access_token}"}

    async with httpx.AsyncClient() as client:
        meta_list: list[dict] = []

        # 1) –†–µ–∂–∏–º ¬´—á–∏—Ç–∞—Ç—å –≤—Å—ë¬ª
        if read_all_mode:
            meta_list = await _list_files(
                client,
                headers,
                q="trashed=false",
                fields="files(id,name,mimeType,parents)",
            )

        # 2) –ü–∞–ø–∫–∏: –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Ö–æ–¥–∏–º id, –∑–∞—Ç–µ–º –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏
        if folder_names:
            for folder in folder_names:
                q_folder = (
                    f"trashed=false and mimeType='{FOLDER_MIME}' and name='{folder}'"
                )
                folders = await _list_files(client, headers, q=q_folder, page_size=1)
                if not folders:
                    logger.info("üìÇ –ü–∞–ø–∫–∞ ¬´%s¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", folder)
                    continue

                folder_id = folders[0]["id"]
                q_inside = f"'{folder_id}' in parents and trashed=false"
                files_in_folder = await _list_files(
                    client, headers, q_inside, fields="files(id,name,mimeType,parents)"
                )
                meta_list.extend(files_in_folder)

        # 3) –§–∞–π–ª—ã: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª (–ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if file_names:
            for name in file_names:
                q_file = (
                    f"trashed=false and name='{name}' and mimeType!='{FOLDER_MIME}'"
                )
                files = await _list_files(
                    client,
                    headers,
                    q=q_file,
                    page_size=1,
                    fields="files(id,name,mimeType,parents)",
                )
                if files:
                    meta_list.append(files[0])
                else:
                    logger.info("üìÑ –§–∞–π–ª ¬´%s¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω", name)

    if not meta_list:
        logger.info("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
        return []

    # ‚îÄ‚îÄ –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ id)
    seen: set[str] = set()
    unique_meta = []
    for m in meta_list:
        if m["id"] not in seen:
            seen.add(m["id"])
            unique_meta.append(m)

    # ‚îÄ‚îÄ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MIME –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    candidates = [m for m in unique_meta if m["mimeType"] in TEXT_MIME_TYPES][
        :MAX_FILES_PER_RUN
    ]
    logger.info("üìÑ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±—Ä–∞–Ω–æ %d —Ñ–∞–π–ª–æ–≤", len(candidates))

    result: list[tuple[str, str, str, int]] = []

    for meta in candidates:
        file_id, file_name, mime_type = meta["id"], meta["name"], meta["mimeType"]
        await on_progress(f"üîç –ß–∏—Ç–∞—é: {file_name}")

        text = await _download_and_extract_text(
            file_id=file_id,
            file_name=file_name,
            mime_type=mime_type,
            headers=headers,
        )

        if text:
            result.append((file_id, file_name, text, user_id))
            await on_progress(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {file_name}")
        else:
            await on_progress(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {file_name}")

        if len(result) >= MAX_FILES_PER_RUN:
            break

    await on_progress(f"üì• –£—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result)}")
    logger.info("üèÅ read_files_from_drive finished. total=%d", len(result))
    return result


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _list_files(
    client: httpx.AsyncClient,
    headers: dict,
    q: str,
    *,
    page_size: int = 100,
    fields: str = "files(id,name,mimeType)",
) -> list[dict]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Drive list API (–æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ)."""
    resp = await client.get(
        "https://www.googleapis.com/drive/v3/files",
        headers=headers,
        params={
            "pageSize": page_size,
            "fields": fields,
            "q": q,
        },
    )
    resp.raise_for_status()
    return resp.json().get("files", [])


async def _download_and_extract_text(
    file_id: str,
    file_name: str,
    mime_type: str,
    headers: dict,
) -> str | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä >100 –ö–ë –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."""
    export_url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media"

    async with httpx.AsyncClient() as client:
        # HEAD –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        try:
            head = await client.head(export_url, headers=headers, follow_redirects=True)
            if (cl := head.headers.get("Content-Length")) and int(cl) > MAX_FILE_SIZE:
                logger.info("‚è≠ %s > 100 –ö–ë (–ø–æ Content-Length)", file_name)
                return None
        except Exception:
            pass  # HEAD –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è

        # –°–∞–º —Ñ–∞–π–ª
        try:
            resp = await client.get(export_url, headers=headers, follow_redirects=True)
            resp.raise_for_status()
            content = resp.content
        except Exception as e:
            logger.warning("‚ùå –ù–µ —Å–∫–∞—á–∞–Ω %s: %s", file_name, e)
            return None

    if len(content) > MAX_FILE_SIZE:
        logger.info("‚è≠ %s > 100 –ö–ë (—Ñ–∞–∫—Ç)", file_name)
        return None

    # –£—Ç–æ—á–Ω—è–µ–º MIME, –µ—Å–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    if mime_type not in TEXT_MIME_TYPES:
        if kind := filetype.guess(content):
            mime_type = kind.mime

    reader = _select_reader(mime_type)
    if not reader:
        logger.debug("‚è≠ %s ‚Äî –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME %s", file_name, mime_type)
        return None

    try:
        return await reader.read(content)
    except Exception as e:
        logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %s", file_name, e)
        return None


def _select_reader(mime_type: str):
    """–ü–æ–¥–±–∏—Ä–∞–µ—Ç —Ä–∏–¥–µ—Ä –ø–æ MIME."""
    return {
        "text/plain": TxtReader(),
        "application/pdf": PdfReader(),
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document": DocxReader(),
        "text/csv": CsvReader(),
        "application/vnd.ms-excel": CsvReader(),
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ExcelReader(),
    }.get(mime_type)
