import logging
from datetime import datetime, timedelta, timezone

import httpx
from sqlalchemy.ext.asyncio import AsyncSession
from sqlmodel import select

from app.core.config import CLIENT_ID, CLIENT_SECRET
from app.models.user import User

logger = logging.getLogger(__name__)


async def get_valid_access_token(telegram_id: int, session: AsyncSession) -> str:
    logger.info(
        "üîç get_valid_access_token: —Å—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è telegram_id=%s", telegram_id
    )

    # 1. –î–æ—Å—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await session.scalar(select(User).where(User.telegram_id == telegram_id))
    if not user:
        logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: telegram_id=%s", telegram_id)
        raise RuntimeError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ —Ç–æ–∫–µ–Ω–∞
    now = datetime.now(timezone.utc).replace(tzinfo=None)
    if user.token_expiry and user.token_expiry > now + timedelta(minutes=1):
        logger.info(
            "üîí –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, expires at %s (now %s)", user.token_expiry, now
        )
        return user.access_token

    # 3. –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    logger.info(
        "üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª (expiry=%s, now=%s). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ refresh_token...",
        user.token_expiry,
        now,
    )
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                "https://oauth2.googleapis.com/token",
                data={
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET,
                    "refresh_token": user.refresh_token,
                    "grant_type": "refresh_token",
                },
            )
            resp.raise_for_status()
            tokens = resp.json()
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Google –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
        raise RuntimeError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ expiry
    user.access_token = tokens["access_token"]
    user.token_expiry = (
        datetime.now(timezone.utc) + timedelta(seconds=tokens.get("expires_in", 3600))
    ).replace(tzinfo=None)

    await session.commit()
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: new expiry=%s", user.token_expiry)
    return user.access_token
