from datetime import datetime, timezone, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlmodel import select
from app.models.user import User
from app.core.config import CLIENT_ID, CLIENT_SECRET
import httpx
import logging

logger = logging.getLogger(__name__)

async def get_valid_access_token(telegram_id: int, session: AsyncSession) -> str:
    logger.info("–ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: %s", telegram_id)
    user = await session.scalar(select(User).where(User.telegram_id == telegram_id))
    if not user:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: %s", telegram_id)
    else:
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %s", user.email)

    now = datetime.now(timezone.utc).replace(tzinfo=None)
    if user.token_expiry and user.token_expiry > now + timedelta(minutes=1):
        return user.access_token


    logger.info("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ refresh_token...")

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                "https://oauth2.googleapis.com/token",
                data={
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET,
                    "refresh_token": user.refresh_token,
                    "grant_type": "refresh_token",
                },
            )
            resp.raise_for_status()
            tokens = resp.json()
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh_token")
        raise RuntimeError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")

    user.access_token = tokens["access_token"]
    user.token_expiry = (
        datetime.now(timezone.utc) + timedelta(seconds=tokens.get("expires_in", 3600))
    ).replace(tzinfo=None)

    await session.commit()
    logger.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è telegram_id=%s", telegram_id)
    return user.access_token
