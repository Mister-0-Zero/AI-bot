import os, logging, asyncio
from contextlib import asynccontextmanager
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ---------- –∫–æ–Ω—Ñ–∏–≥ ----------
load_dotenv()
BOT_TOKEN      = os.getenv("BOT_TOKEN")
CLIENT_ID      = os.getenv("GOOGLE_CLIENT_ID")
RAILWAY_DOMAIN = os.getenv("RAILWAY_DOMAIN")
CLIENT_SECRET  = os.getenv("GOOGLE_CLIENT_SECRET")
USE_POLLING    = os.getenv("USE_POLLING", "").lower() in ("1", "true")

logging.info(f"üîó USE_POLLING = {USE_POLLING}")

if not BOT_TOKEN or not RAILWAY_DOMAIN:
    raise RuntimeError("BOT_TOKEN –∏ RAILWAY_DOMAIN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")

# ---------- Telegram ----------
bot_app = ApplicationBuilder().token(BOT_TOKEN).build()

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /connect_google –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google-–î–∏—Å–∫–∞."
    )

async def cmd_connect(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not CLIENT_ID:
        await update.message.reply_text("‚ö†Ô∏è  Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    url = (
        f"https://accounts.google.com/o/oauth2/auth?"
        f"client_id={CLIENT_ID}&"
        f"redirect_uri=https://{RAILWAY_DOMAIN}/oauth2callback&"
        f"scope=https://www.googleapis.com/auth/drive.readonly&"
        f"response_type=code&access_type=offline&prompt=consent"
    )
    await update.message.reply_text(f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n{url}")

bot_app.add_handler(CommandHandler("start", cmd_start))
bot_app.add_handler(CommandHandler("connect_google", cmd_connect))

# ---------- FastAPI + lifespan ----------
WEBHOOK_PATH = "/telegram-webhook"
WEBHOOK_URL  = f"https://{RAILWAY_DOMAIN}{WEBHOOK_PATH}" if RAILWAY_DOMAIN else None

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-Application –æ–¥–∏–Ω —Ä–∞–∑
    await bot_app.initialize()

    if USE_POLLING:
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        loop = asyncio.get_event_loop()
        loop.create_task(bot_app.start())
        loop.create_task(bot_app.updater.start_polling(stop_signals=[]))
        logging.info("üîÅ polling —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
    else:
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–æ–¥ (Railway) ‚Äì webhook ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        logging.info("üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é webhook ‚Üí %s", WEBHOOK_URL)
        await bot_app.bot.set_webhook(url=WEBHOOK_URL)

    yield                                        # ‚Üê –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ graceful-shutdown ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if USE_POLLING:
        await bot_app.updater.stop()
        await bot_app.stop()
    else:
        await bot_app.bot.delete_webhook()
    await bot_app.shutdown()

api = FastAPI(lifespan=lifespan)

@api.get("/")
async def root():
    return {"message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"}

@api.get("/oauth2callback")
async def oauth_callback(request: Request):
    code = request.query_params.get("code")
    return {"message": f"–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω: {code}"}

@api.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    """Telegram —à–ª—ë—Ç —Å—é–¥–∞ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}

# Uvicorn –∏—â–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é app_web (—Å–º. Procfile)
app_web = api

if USE_POLLING:                    
    import threading
    def run_polling():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(bot_app.run_polling(stop_signals=[]))
    threading.Thread(target=run_polling, daemon=True).start()
